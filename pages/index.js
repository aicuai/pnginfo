import { useState } from 'react';
import axios from 'axios';

export default function Home() {
  const [metadata, setMetadata] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsLoading(true);
    setError(null);
    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await axios.post('/api/getPngInfo', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      setMetadata(response.data);
    } catch (error) {
      console.error('Error uploading file:', error);
      setError(error.response?.data?.error || 'An error occurred while processing the file');
    } finally {
      setIsLoading(false);
    }
  };

  const renderMetadataSection = (title, data) => {
    if (data && (typeof data === 'object' ? Object.keys(data).length > 0 : true)) {
      return (
        <>
          <h3 className="font-bold mt-4">{title}</h3>
          <pre className="bg-gray-100 p-2 rounded overflow-auto max-h-60">{JSON.stringify(data, null, 2)}</pre>
        </>
      );
    }
    return null;
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">PNG Metadata Extractor</h1>
      
      <div className="service-description mb-6 p-4 bg-gray-100 rounded">
        <h2 className="text-xl font-bold mb-2">About This PNG Metadata Extractor</h2>
        
        <p>This service allows you to upload PNG images and extract hidden metadata, particularly from AI-generated images. Here's how it works:</p>
        
        <ol className="list-decimal list-inside mb-4">
          <li>Upload a PNG image using the file selector below.</li>
          <li>Our system will analyze the image and attempt to extract metadata.</li>
          <li>The extracted information will be displayed, including:
            <ul className="list-disc list-inside ml-4">
              <li>Basic image information (dimensions, format, etc.)</li>
              <li>Generation parameters (if available)</li>
              <li>Prompt used for generation (if available)</li>
              <li>Workflow data (if available)</li>
              <li>Other metadata found in the image</li>
            </ul>
          </li>
        </ol>

        <h3 className="font-bold mb-2">Important Notes:</h3>
        <ul className="list-disc list-inside mb-4">
          <li>This tool is designed primarily for PNG images generated by AI tools like ComfyUI, Stable Diffusion, etc.</li>
          <li>It may also work with JPEG images that were converted from such PNG files, but with potentially less information.</li>
          <li>Not all images will contain all types of metadata. The information displayed depends on what's embedded in the image.</li>
          <li>Large or complex metadata (especially workflow data) might not display correctly or completely.</li>
          <li>This is an experimental service, and results may vary depending on the source and format of your image.</li>
        </ul>

        <p>If you encounter any issues or have questions about the extracted metadata, please contact X@o_ob.</p>
      </div>

      <div className="mb-4 p-4 bg-blue-100 rounded">
        <input
          type="file"
          accept="image/png,image/jpeg"
          onChange={handleFileUpload}
          className="w-full p-2 border rounded"
        />
      </div>

      {isLoading && <p className="text-center">Processing...</p>}
      {error && <p className="text-red-500">{error}</p>}
      
      {metadata && (
        <div className="metadata">
          <h2 className="text-xl font-bold mb-2">Extracted Metadata</h2>
          <div className="bg-gray-100 p-4 rounded">
            {renderMetadataSection("Basic Information", {
              format: metadata.format,
              size: metadata.size,
              width: metadata.width,
              height: metadata.height,
              space: metadata.space,
              channels: metadata.channels,
              depth: metadata.depth,
              density: metadata.density,
              isProgressive: metadata.isProgressive,
              hasProfile: metadata.hasProfile,
              hasAlpha: metadata.hasAlpha,
            })}
            {renderMetadataSection("File Info", metadata.fileinfo)}
            {renderMetadataSection("Parameters", metadata.parameters)}
            {renderMetadataSection("Prompt", metadata.prompt)}
            {renderMetadataSection("Workflow", metadata.workflow)}
            {renderMetadataSection("EXIF Data", metadata.exif)}
            {renderMetadataSection("Other Metadata", metadata.otherMetadata)}
          </div>
        </div>
      )}
    </div>
  );
}